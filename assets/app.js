"use strict";angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(t,n){o.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(o,e,r){o.login=function(t,n){e.login(t,n).then(function(t){o.$emit("login",t),r.path("/")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,t){t.fetch().then(function(t){o.posts=t}),o.addPost=function(){o.postBody&&t.create({username:"dickeyxxx",body:o.postBody}).then(function(t){o.postBody=null})},o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})})}]),angular.module("app").service("PostsSvc",["$http",function(n){this.fetch=function(){return n.get("/api/posts")},this.create=function(t){return n.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,e){o.register=function(t,n){e.register(t,n).then(function(t){o.$emit("login",t)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var e=this;e.getUser=function(){return o.get("/api/users").then(function(t){return t.data})},e.login=function(t,n){return o.post("/api/sessions",{username:t,password:n}).then(function(t){return e.token=t.data,o.defaults.headers.common["X-Auth"]=t.data,e.getUser()})},console.info("svc",e)}]),angular.module("app").run(["$rootScope","$timeout","$location",function(e,r,s){!function t(){var n="ws://"+s.host()+":"+s.port(),o=new WebSocket(n);o.onopen=function(){console.info("WebSocket connected...")},o.onclose=function(){console.info("WebSocket closed. Reconnecting..."),r(t,1e4)},o.onmessage=function(t){var n=JSON.parse(t.data);e.$broadcast("ws:"+n.topic,n.data)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
