"use strict";angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(n,t){o.currentUser=t})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,e){o.login=function(n,t){e.login(n,t).then(function(n){o.$emit("login",n)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,n){n.fetch().success(function(n){o.posts=n}),o.addPost=function(){o.postBody&&n.create({username:"dickeyxxx",body:o.postBody}).success(function(n){o.postBody=null})},o.$on("ws:new_post",function(n,t){o.$apply(function(){o.posts.unshift(t)})})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,e){o.register=function(n,t){e.register(n,t).then(function(n){o.$emit("login",n)})}}]),angular.module("app").config(["$routeProvider",function(n){n.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var e=this;e.getUser=function(){return o.get("/api/users").then(function(n){return n.data})},e.login=function(n,t){return o.post("/api/sessions",{username:n,password:t}).then(function(n){return e.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,e.getUser()})},console.info("svc",e)}]),angular.module("app").run(["$rootScope","$timeout",function(o,e){!function n(){var t=new WebSocket("ws://localhost:3000");t.onopen=function(){console.info("WebSocket connected...")},t.onclose=function(){console.info("WebSocket closed. Reconnecting..."),e(n,1e4)},t.onmessage=function(n){var t=JSON.parse(n.data);o.$broadcast("ws:"+t.topic,t.data)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
